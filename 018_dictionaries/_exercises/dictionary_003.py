# # -*- coding: utf-8 -*-
#
# # Методы  для работы со словарями
# # k...    - Одинаковые ключи
# d1, d2 _ |"a": 1 "b": 2| |"a": 3 "c": 4, "d": 5|
# print d1.k...   & d2.k...
# # |'a'|
#
# # Методы  для работы со словарями
# # k...    - Уникальные ключи
# d1, d2 _ |"a": 1 "b": 2| |"a": 3 "c": 4 "d": 5|
# print d1.k...   ^ d2.k...
# # |'c', 'b', 'd'|
#
# # Методы  для работы со словарями
# # v...
# # возвращает объект dict_ v..., содержащий все значения словаря. Этот
# # объект поддерживает итерации.
#
# d _ |"a": 1 "b": 2|
# print d.v...     # Получаем объект dict_values
# # dict_values [1, 2]
# print li.. d.v...   # Получаем список значений
# # [1, 2]
# print |v ___ v i_ d.v...  |
# # [1, 2]
#
# # items
# # возвращает объект dict_items, содержащий все юпочи и значения в виде кортежей.
# # Этот объект поддерживает итерации.
#
# d _ |"a": 1, "b": 2|
# print d.items   # Получаем объект dict_items
# # dict_items [ 'a', 1 ,  'b', 2 ]
# print li.. d.items  # Получаем список кортежей
# # [ 'a', 1 ,  'b', 2 ]
#
# # <Ключ> i_ <Словарь>
# # проверяет существование указанного юпоча в словаре. Если kluch найден,
# # то возвращается значение тrue, в противном случае - False.
#
# d _ |"a": 1 "b": 2|
# print "a" i_ d   # Ключ существует
# # True
# print "c" i_ d    # Ключ не существует
# # False
#
# # <Ключ> not i_ <Словарь>
# # проверяет отсутствие указанного юпоча в словаре. Если такового Ключа нет, то возвращается значение True,
# # в противном случае - False. Примеры:
#
# d _ |"a": 1 "b": 2|
# print "c" no. i_ d  # Ключ не существует
# # True
# print "a" no. i_ d   # Ключ существует
# # False
#
# # get   <Ключ> [, <Значение по умолчанию>]
# # если ключ присутствует в словаре, то метод
# # возвращает значение, соответствующее этому Ключу. Если ключ отсутствует, то возвращается None или значение,
# # указанное во втором параметре
#
# d _ |"a" 1 "b" 2|
# print d.g.. "a"  d.g.. "c"  d.g.. "c"  800
# #  1, None, 800
#
# # set....  <Ключ> [, <Значение по умолчанию>]
# # если Ключ присутствует в словаре,
# # то метод возвращает значение, соответствующее этому ключу. Если ключ отсутствует, то создает в словаре новый элемент
# # со значением, указанным во втором параметре. Если второй параметр не указан, значением нового элемента будет None.
#
# d _ |"a" 1 "b" 2|
# print d.set.... "a"  d.set.... "c"  d.set.... "d" 0
# #  1, None, 0 print
# print d
# # |'a': 1, 'c': None, 'b': 2, 'd': 0|
#
# # рор   <Ключ> [, <Значение по умолчанию> ]
# # удаляет элемент с указанным ключ ом и
# # возвращает его значение. Если ключ отсутствует, то возврашается значение из второго параметра.
# # Если ключ отсутствует, и второй параметр не указан, возбуждается исключение KeyError.
# #
# d _ |"a" 1 "b" 2 "c": 3|
# print d.p.. "a"  d.p.. "n" 0
#
# # p..i..
# # удаляет произвольный элемент и возвращает кортеж из ключа и значения.
# # Если словарь пустой, возбуждается исключение KeyError.
# #
# d _ |"a": 1 "b": 2|
# print d.p..i..
# #  'a', 1
# print d.p..i..
#
# # clear
# # удаляет все элементы словаря. Метод ничего не возвращает в качестве значения.
# #
# d _ |"a": 1, "b": 2|
# d.cl..      # Удаляем все элементы
# print d   # Словарь теперь пустой
# # ||
#
# # update
# # uрdаtе <Ключ1>_<Значение1>[, ... , <КлючN>_<ЗначениеN>]
# # добавляет элементы в словарь. Метод изменяет текущий словарь и ничего
# # не возвращает.
# #
# d _ |"a" 1 "b" 2|
# d.up....c_3 d_4
# print d
#
# # update
# # uрdаtе <Словарь>
#
# d _ |"a": 1, "c": 3, "b": 2, "d": 4|
# d.up... |"c": 10, "d": 20|    # Словарь
# print d  # Значения элементов перезаписаны

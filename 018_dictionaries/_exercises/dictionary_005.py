# # -*- coding: utf-8 -*-
#
# # di...f... sequence[, value]
# # создаёт новый словарь с
# # ключами из последовательности sequence и заданным значением  по умолчанию –
# # None .
# #
# numbers_dict _ di...f... ra.. 3  42
# print ?
#
# # d.get key[, default]
# # безопасное получение значения по ключу  никогда не  выбрасывает KeyError .
# # Если ключ не найден, возвращается значение default   по-умолчанию – None .
# #
# ___ key __ ra.. 5
#     print '@:'.f... k..  ?.g.. ? 0
#
# # d.items
# #  в Python 3 возвращает объект представления словаря, соответствующий парам  двухэлементным кортежам
# #  вида  ключ, значение .  В  Python 2 возвращает соответствующий список, а метод iteritems   возвращает итератор.
# # Аналогичный метод в Python 2.7 – viewitems  .
# #
# phonebook _ |
#     'Jack': '032-846',
#     'Guido': '917-333',
#     'Mario': '120-422',
#     'Mary': '890-532',  # последняя запятая игнорируется
# |
#
# print 'Items:' ?.it..
#
# # d.keys
# # в Python 3 возвращает объект представления словаря, соответствующий ключам словаря.  В Python 2 возвращает соответствующий
# # список, а метод iterkeys   возвращает итератор.  Аналогичный метод в Python
# # 2.7 – viewkeys  .
# #
# phonebook _ |
#     'Jack': '032-846',
#     'Guido': '917-333',
#     'Mario': '120-422',
#     'Mary': '890-532',  # последняя запятая игнорируется
# |
#
# print 'Keys:' ?.k..
#
# # d.values
# # в Python 3 возвращает объект представления словаря, соответствующий значениям.
# # В Python 2 возвращает соответствующий список, а метод itervalues   возвращает итератор.
# # Аналогичный метод в Python 2.7 –
# # viewvalues  .
# #
# phonebook _ |
#     'Jack': '032-846',
#     'Guido': '917-333',
#     'Mario': '120-422',
#     'Mary': '890-532',  # последняя запятая игнорируется
# |
#
# print 'Values:', ?.va..
#
# # d.pop key[, default]
# # если ключ key существует, удаляет элемент из словаря и возвращает его значение.  Если ключ не существует и задано значение
# # default, возвращается данное значение, иначе выбрасывается исключение KeyError.
# #
# phonebook _ |
#     'Jack': '032-846',
#     'Guido': '917-333',
#     'Mario': '120-422',
#     'Mary': '890-532',  # последняя запятая игнорируется
# |
#
# number _ ?.p.. 'Lumberjack'
# print 'Deleted Lumberjack  was ' + ? + ' '
# print ph..
#
# # d.popitem
# # удаляет произвольную пару ключ-значение и возвращает её.  Если словарь пустой, возникает исключение KeyError.
# # Метод полезен для алгоритмов, которые обходят словарь, удаляя уже обработанные значения  например,
# # определённые алгоритмы, связанные с теорией графов .
# #
# phonebook _ |
#     'Jack': '032-846',
#     'Guido': '917-333',
#     'Mario': '120-422',
#     'Mary': '890-532',  # последняя запятая игнорируется
# |
#
# person _ ?.p..i..
# print 'Popped @  phone: @ '.f... 0p...
#
# # d.setdefault key[, default]
# #  если ключ key существует, возвращает
# # соответствующее значение.  Иначе создаёт элемент с ключом key и значением default.  default по умолчанию равен None.
# #
# phonebook _ |
#     'Jack': '032-846',
#     'Guido': '917-333',
#     'Mario': '120-422',
#     'Mary': '890-532',  # последняя запятая игнорируется
# |
#
# ___ person __  'Jack', 'Liz'
#     phone _ ?.s..d.. p.. '000-000'
#     print '@: @'.f... ? ?
# print ph..
#
# # d.u... mapping
# # принимает либо другой словарь или отображение, либо итерабельный объект, состоящий из итерабельных объектов –
# # пар ключ-значение, либо именованные аргументы.  Добавляет соответствующие элементы в словарь,
# # перезаписывая элементы с существующими ключами.
# #
# phonebook _ |
#     'Jack': '032-846',
#     'Guido': '917-333',
#     'Mario': '120-422',
#     'Mary': '890-532',  # последняя запятая игнорируется
# |
#
# ?.u... |'Alex': '832-438', 'Alice': '231-987'|
# ?.u... [ 'Joe', '217-531' ,  'James', '783-428' ]
# ?.u... Carl_'783-923', Victoria_'386-486'
# print ?
#

#!/usr/bin/python3
"""
(This problem is the same as Minimize Malware Spread, with the differences
bolded.)

In a network of nodes, each node i is directly connected to another node j if
and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are
directly connected and at least one of those two nodes is infected by malware,
both nodes will be infected by malware.  This spread of malware will continue
until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the
entire network, after the spread of malware stops.

We will remove one node from the initial list, completely removing it and any
connections from this node to any other node.  Return the node that if removed,
would minimize M(initial).  If multiple nodes could be removed to minimize
M(initial), return such a node with the smallest index.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1

Example 3:
Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1


Note:
1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
"""
____ typing _______ List
____ c.. _______ d..


c_ DisjointSet:
    ___ -
        pi    # dict

    ___ union  x, y
        pi[find(x)] = find(y)

    ___ find  x
        __ x n.. __ pi:
            pi[x] = x
        __ pi[x] != x:
            pi[x] = find(pi[x])
        r.. pi[x]


c_ Solution:
    ___ minMalwareSpread  graph: List[List[i..]], initial: List[i..]) __ i..:
        """
        DisjointSet? DisjointSet cannot remove connections

        Then don't add the connections from the malware at all

        For each component of G, either it neighbors 0, 1, or >= 2 nodes from
        initial. The result only changes if there is exactly 1 neighbor from
        initial, so we need a way to count this.
        """
        n = l..(graph)
        initial_set = s..(initial)
        normal = [i ___ i __ r..(n) __ i n.. __ initial_set]
        ds = DisjointSet()
        ___ i __ normal:
            ___ j __ normal:
                __ graph[i][j] __ 1:
                    ds.union(i, j)

        sizes = d..(i..)
        ___ i __ normal:
            sizes[ds.find(i)] += 1

        comp2malcount = d..(i..)
        mal2comps = d..(s..)
        ___ i __ normal:
            ___ j __ initial:
                __ graph[i][j] __ 1:
                    comp2malcount[ds.find(i)] += 1
                    mal2comps[j].add(ds.find(i))

        idx = m..(initial)
        max_size = 0
        ___ j __ initial:
            ___ comp __ mal2comps[j]:
                __ comp2malcount[comp] __ 1:
                    __ sizes[comp] > max_size:
                        max_size = sizes[comp]
                        idx = j
                    ____ sizes[comp] __ max_size:
                        idx = m..(idx, j)

        r.. idx

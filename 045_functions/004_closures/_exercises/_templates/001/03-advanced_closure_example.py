# -*- coding: utf-8 -*-

# """Демонстрация часто допускаемой ошибки и способа её решения"""
#
# ___ make_powers n
#     """Функция, возвращающая список функций, каждая из которых вычисляет
#     степень аргумента, равную данному индексу плюс 1
#     (неправильная реализация)
#     """
#
#     functions     # list
#
#     ___ i __ ra.. 1 ? + 1
#         ?.ap.. l____ x ? ** i
#
#     r_ ?
#
#
# ___ function __ m.. 3
#     print ? 2
#
# # Видно, что результататом было не 2, 4, 8, как можно было бы ожидать,
# # а 8, 8, 8
#
# print()
#
# # Причиной этого является так называемое позднее связываение.  К тому моменту,
# # когда вызываются функции из списка, цикл в функции make_powers уже выполнен и
# # переменная i всегда равна n + 1.
#
# # Для того, чтобы избавиться от этого, необходимо скопировать данную переменную
# # в локальные переменные каждой функции.  Единственный способ создать локальную
# # переменную в лямбда-выражении -- это создать параметр функции.
#
# ___ make_powers n
#     """Функция, возвращающая список функций, каждая из которых вычисляет
#     степень аргумента, равную данному индексу плюс 1
#     (правильная реализация)
#     """
#
#     functions             # list
#
#     ___ i __ ra.. 1 ? + 1
#         ?.ap.. l___ x i_i ? ** i
#
#     r_ ?
#
#
# ___ function i_ m... 3
#     print ? 2

# # -*- coding: utf-8 -*-
#
# #В Python функция map принимает два аргумента: функцию и аргумент составного типа данных, например, список.
# # map применяет к каждому элементу списка переданную функцию. Например, вы прочитали из файла список чисел,
# # изначально все эти числа имеют строковый тип данных, чтобы работать с ними - нужно превратить их в целое число:
#
# old_list _ '1' '2' '3' '4' '5' '6' '7'
# new_list _   # list
# ___ item __ ?
#   ?.ap.. in. ?
# print ?
# # [1, 2, 3, 4, 5, 6, 7]
#
# # Тот же эффект мы можем получить, применив функцию map:
#
# old_list _ '1' '2' '3' '4' '5' '6' '7'
# new_list = l... m.. in. ?
# print  ?2
#
# # [1, 2, 3, 4, 5, 6, 7]
#
# # Как видите такой способ занимает меньше строк, более читабелен и выполняется быстрее. map также работает и
# # с функциями созданными пользователем:
#
# ___ miles_to_kilometers num_miles
#     r_ ? * 1.6
#
# mile_distances _ 1.0 6.5 17.4 2.4 9
# kilometer_distances _ l.. m.. ? ?
# print ?
# # [1.6, 10.4, 27.84, 3.84, 14.4]
#
# # А теперь то же самое, только используя lambda выражение:
#
# mile_distances _ 1.0 6.5 17.4 2.4 9
# kilometer_distances _ l.. m.. l... x ? * 1.6 ?
#
# print ?
# # [1.6, 10.4, 27.84, 3.84, 14.4]
#
# # Функция map может быть так же применена для нескольких списков, в таком случае функция-аргумент должна принимать
# # количество аргументов, соответствующее количеству списков:
#
# l1 _ 1 2 3
# l2 _ 4,5,6
#
# new_list _ l.... m.. l..... x y ? + ? ? ?
# print ?
# # [5, 7, 9]
#
# # Если же количество элементов в списках совпадать не будет, то выполнение закончится на минимальном списке:
#
# l1 = 1 2 3
# l2 = 4 5
#
# new_list _ l.. m.. l.. x y + y ? ?
#
# print ?
# # [5,7]
#
# # Функция filter() в Python:

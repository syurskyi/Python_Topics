1. ФИО

Создать класс Name, который принимает имя и фамилию в качестве аргументов при конструировании.

Класс должен поддерживать атрибуты:

first_name, возвращающий имя

last_name, возвращающий фамилию

full_name, возвращающий имя и фамилию

initials, возвращающий инициалы

Класс должен приводить переданные имя и фамилию в форму при которой имя и фамилия начинаются с заглавной буквы, а все остальные буквы в нижнем регистре (поскольку вызывающий код может передавать такие строки как "JOHN", 'jOHN', 'sMiTh' и т.д.)  

Примеры вызовов:

a1 = Name('john', 'SMITH')
a1.first_name ➞ 'John'
a1.last_name ➞ 'Smith'
a1.full_name ➞ 'John Smith'
a1.initials ➞ 'J.S'

2. Класс калькулятора

Создайте класс Calculator который поддерживает:

- сложение двух чисел
- вычисление разницы между двумя числами
- умножение двух чисел
- деление одного числа на другое

Примеры вызовов и возвратов из функций:

calculator = Calculator()  
calculator.add(10, 5) ➞ 15  
calculator.subtract(10, 5) ➞ 5 
calculator.multiply(10, 5) ➞ 50  
calculator.divide(10, 5) ➞ 2

3. Парсинг сотрудника

Создать класс Employee, который принимает имя, фамилию и зарплату в качестве аргументов при конструировании.

Класс должен поддерживать:

- атрибут first_name, возвращающий имя
- атрибут last_name, возвращающий фамилию
- атрибут salary, возвращающий зарплату

функцию from_string, которая принимает имя, фамилию и зарплату в формате 'first_name-last_name-salary', парсит строку и возвращает экземпляр Employee

Примеры:

emp1 = Employee('Mary', 'Sue', 60000)
emp2 = Employee.from_string('John-Smith-55000')

emp1.first_name ➞ 'Mary'
emp1.salary ➞ 60000
emp2.first_name ➞ 'John'
emp2.salary ➞ 55000

4. Пицца

Создайте класс Pizza, который принимает список ингредиентов.

Класс поддерживает:

- атрибут order_number, который возвращает текущий номер заказа (подсказка: используйте статический атрибут в качестве сквозного счётчика)

- атрибут ingredients, который возвращает список, принятый в конструкторе

- функции (garden_feast, hawaiian, meat_festival) создания видов пицц, ингредиенты которых заранее известны (см. таблицу)

Name	          Ingredients

hawaiian        - ham, pineapple
meat_festival   - beef, meatball, bacon
garden_feast	- spinach, olives, mushroom

Примеры вызовов:

p1 = Pizza(['bacon', 'parmesan', 'ham'])   # order 1
p2 = Pizza.garden_feast()                  # order 2
p1.ingredients ➞ ['bacon', 'parmesan', 'ham']
p2.ingredients ➞ ['spinach', 'olives', 'mushroom']
p1.order_number ➞ 1
p2.order_number ➞ 2

5. Окружность

Создайте класс Circle который конструируется с передачей радиуса в качестве аргумента.

Класс Circle должен предоставлять две функции: 

- get_area, которая возвращает площадь круга
- get_perimeter, которая возвращает длину окружности

# Примеры вызовов

circle = Circle(10)
area = circle.get_area() # возвращает 314.1592653589793
perimeter = circle.get_perimeter() # возвращает 62.83184

6. Смузи

Создать класс Beverage, который при конструировании принимает список ингредиентов

- поддерживает атрибут ingredients, возвращающий список ингредиентов, переданных при конструировании инстанции класса

- поддерживает функцию get_cost, вычисляющую итоговую стоимость всех ингредиентов напитка (получается себестоимость напитка)

- поддерживает функцию get_price, вычисляющую цену напитка посредством умножения себестоимости на 2.5

- поддерживает функцию get_name, которая возвращает строку, перечисляющую ингредиенты, сортируя их в алфавитном порядке. Если ингредиентов больше одного, то в конце добавляет слово 'Fusion', иначе добавляет слово 'Smoothie'. Эта функция также должна заменять 'berries' на 'berry'.

Ингредиенты и их себестоимость:

Strawberries $1.50
Banana $0.50
Mango $2.50
Blueberries $1.00
Raspberries $1.00
Apples $1.75
Pineapple $3.50

Примеры вызовов:

s1 = Beverage(["Banana"])
s1.ingredients ➞ ["Banana"]
s1.get_cost() ➞ "$0.50"
s1.get_price() ➞ "$1.25"
s1.get_name() ➞ "Banana Smoothie"

s2 = Beverage(["Raspberries", "Strawberries", "Blueberries"])
s2.ingredients ➞ ["Raspberries", "Strawberries", "Blueberries"]
s2.get_cost() ➞ "$3.50"
s2.get_price() ➞ "$8.75"
s2.get_name() ➞ "Blueberry Raspberry Strawberry Fusion"
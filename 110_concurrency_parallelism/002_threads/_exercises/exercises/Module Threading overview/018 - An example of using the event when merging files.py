# _____ _, q__, p__
#
#
# ___ writer wr_file  # ПИСАТЕЛЬ
#     w__ T..
#         # ожидаем получение данных
#         __ d__.e..
#             # !!!!! проверяем: живы ли потоки читателей `reader()` !!!!!
#             __ e__.i..
#                 # если очередь пуста и все
#                 # читатели завершили работу ТО:
#                 print('Все файлы объединены.')
#                 # конец работы - завершаем цикл
#                 _____
#         ____
#             # как только поступили данные
#             # извлекаем их и записываем
#             r_file data = d__.g..
#             # пишем данные
#             print _*Пишем файл ?.n..
#             w__ o__ ? __ __ fw
#                 # дописываем в начало файла его имя
#                 ?.w.. _*\n\nИмя файла ? \n\n
#                 # пишем сами данные
#                 ?.w.. ?
#
#
# ___ reader i  # ЧИТАТЕЛЬ
#     # здесь читаем и обрабатываем данные файлов
#     w__ T..
#         # Проверяем, есть ли файлы в очереди
#         __ f__.e..
#             print _*Поток ? завершен.
#             # выходим из цикла
#             _____
#         # Получаем имя файла из очереди
#         r_file = f__.g..
#         print _* Th ?: Читаем  файл ?.n..
#         w__ o__ ? _  __ fr
#             # читаем построчно
#             data   # list
#             ___ line __ ?
#                 # обрабатываем данные построчно
#                 line = ?.r.. 'у', '0' .l..
#                 # складываем обработанные строки в список
#                 ?.a.. ?
#             # объединяем данные в текст
#             data_all = ''.j.. ?
#             # Ставим в очередь кортеж (имя_файла, данные)
#             d__.p.. ? ?
#
#         # !!!!! включаем управление событиями !!!!!
#
#
# event_reader = _.?
# # очередь с названием файлов
# files_queue = q__.?
# # очередь с обработанными данными
# data_queue = q__.?
#
# path = p__.? '.'
# # каталог с файлами
# test_dir = 'test_dir'
# path_dir = ?.j.. ?
# # список файлов
# list_files = ?.g.. _.txt
#
# # создаем и заполняем очередь именами файлов
# ___ file __ ?
#     ?.p.. ?
#
# # общий файл c обработанными данными
# write_file = 'multi-thead-file.txt'
#
# __ ?.e..
#     print('НЕТ файлов для обработки.')
# ____
#     # пишем в 1 поток. Если данные писать в несколько потоков,
#     # то нужно еще использовать блокировщик threading.Lock()
#     # или данные в итоговом файле будут перемешаны.
#     tw = _.? t.. ? a.. ?
#     ?.s..
#
#     # читаем и обрабатываем в 2 потока
#     threads # list
#     ___ i __ r.. 2
#         tr = _.? t.. ? a..  ? + 1
#         ?.a.. ?
#         ?.s..
#
#     # ждем, когда все файлы прочитаются
#     ?.j.. ___ ? __ ?
#     # как все потоки reader() завершены
#     # !!!!! скажем об этом writer() !!!!!
#     ?.s..